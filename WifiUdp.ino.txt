#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

//SSID of your network
char ssid[] = "TUI"; //SSID of your Wi-Fi router
char pass[] = "password"; //Password of your Wi-Fi router
int keyIndex = 0;

unsigned int localPort = 4000; 
char packetBuffer[255]; //buffer to hold incoming packet
char  ReplyBuffer[] = "";       // a string to send back

WiFiUDP Udp;

//input
const int buttonPin = 4;
const int ledpin = 5;
int buttonState = LOW;

void setup()
{
  pinMode(buttonPin, INPUT);
  pinMode(ledpin, OUTPUT);
  IPAddress ip(192, 175, 0, 20); 
  IPAddress gateway(192, 175, 0, 1); 
  IPAddress subnet(255, 255, 255, 0); 
  IPAddress DNS(192, 175, 0, 1); 
  Serial.begin(115200);
  WiFi.config(ip, gateway, subnet, DNS);  
  delay(100); 
  //WiFi.mode(WIFI_STA); 
  WiFi.begin(ssid, pass); 
  Serial.print("Connecting"); 
  while (WiFi.status() != WL_CONNECTED) { 
    Serial.print("."); 
    delay(200);  
  }   
  while (WiFi.waitForConnectResult() != WL_CONNECTED) { 
    Serial.println(); 
    Serial.println("Fail connecting"); 
    delay(5000); 
    ESP.restart(); 
  }   
  Serial.print("   OK  "); 
  Serial.print("Module IP: "); 
  Serial.println(WiFi.localIP());
  printWifiStatus(); 
  // if you get a connection, report back via serial:
  Udp.begin(localPort);
} 

void loop () {// if there's data available, read a packet
  int packetSize = Udp.parsePacket();

  if (packetSize) {
    Serial.print("Received packet of size ");
    Serial.println(packetSize);
    Serial.print("From ");
    IPAddress remoteIp = Udp.remoteIP();
    Serial.print(remoteIp);
    Serial.print(", port ");
    Serial.println(Udp.remotePort());

    // read the packet into packetBufffer
    int len = Udp.read(packetBuffer, 255);
    if (len > 0) {
      packetBuffer[len] = 0;
    }
    Serial.println("Contents:");
    Serial.println(packetBuffer);

    String str(packetBuffer);

    if(str == "hello from unity"){
      digitalWrite(ledpin, HIGH); 
    }

     buttonState = digitalRead(buttonPin);
     if(buttonState == HIGH){
      String str1 = "Button1 pressed"; 
      str1.toCharArray(ReplyBuffer, 50); 
     }
     else{
      String str1 = "Button1 off"; 
      str1.toCharArray(ReplyBuffer, 50);
     }

     Serial.println(ReplyBuffer);
     Serial.println(Udp.remoteIP());
     Serial.println(Udp.remotePort());

    // send a reply, to the IP address and port that sent the packet
    Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
    Udp.write(ReplyBuffer);
    Udp.endPacket();
  }
  else{
      digitalWrite(ledpin, LOW);   
    }
    delay(10);
  }